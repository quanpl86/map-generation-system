# src/map_generator/service.py

from .models.map_data import MapData
from .models.path_info import PathInfo
from .topologies.simple_path import SimplePathTopology
from .topologies.straight_line import StraightLineTopology
from .topologies.staircase import StaircaseTopology
from .topologies.square import SquareTopology
from .topologies.plowing_field import PlowingFieldTopology
from .topologies.grid import GridTopology
from .topologies.symmetrical_islands import SymmetricalIslandsTopology
from .topologies.spiral import SpiralTopology
from .topologies.interspersed_path import InterspersedPathTopology
from .topologies.l_shape import LShapeTopology
from .topologies.spiral_staircase import SpiralStaircaseTopology
from .topologies.spiral_platform_staircase import SpiralPlatformStaircaseTopology
from .topologies.t_shape import TShapeTopology
from .topologies.staircase_2d import Staircase2DTopology
from .topologies.terraced_field import TerracedFieldTopology # TH√äM M·ªöI
from .topologies.complex_maze import ComplexMazeTopology
from .placements.sequencing_placer import SequencingPlacer
from .placements.obstacle_placer import ObstaclePlacer # TH√äM M·ªöI
from .placements.for_loop_placer import ForLoopPlacer
from .placements.function_placer import FunctionPlacer
from .placements.variable_placer import VariablePlacer
from .placements.while_if_placer import WhileIfPlacer
from .placements.algorithm_placer import AlgorithmPlacer

class MapGeneratorService:
    def __init__(self):
        print("‚öôÔ∏è  Kh·ªüi t·∫°o MapGeneratorService...")
        self.topologies = {
            'simple_path': SimplePathTopology(),
            'straight_line': StraightLineTopology(),
            'staircase': StaircaseTopology(),
            'square_shape': SquareTopology(),
            'plowing_field': PlowingFieldTopology(),
            'grid': GridTopology(),
            'symmetrical_islands': SymmetricalIslandsTopology(),
            'spiral_path': SpiralTopology(),
            'interspersed_path': InterspersedPathTopology(),
            'l_shape': LShapeTopology(),
            'spiral_staircase': SpiralStaircaseTopology(),
            'spiral_platform_staircase': SpiralPlatformStaircaseTopology(),
            't_shape': TShapeTopology(),
            'staircase_2d': Staircase2DTopology(),
            'terraced_field': TerracedFieldTopology(), # TH√äM M·ªöI
            'complex_maze_2d': ComplexMazeTopology(),
            'variable_length_sides': StraightLineTopology(),
            'item_counting_path': StraightLineTopology(),
            'unknown_length_hallway': StraightLineTopology(),
            'unknown_height_tower': StaircaseTopology(),
            'variable_size_rectangles': PlowingFieldTopology(),
        }
        self.placements = {
            'sequencing': SequencingPlacer(),
            'obstacle': ObstaclePlacer(), # TH√äM M·ªöI
            'functions': FunctionPlacer(),
            'function_definition': FunctionPlacer(),
            'function_decomposition': FunctionPlacer(),
            'function_with_params': FunctionPlacer(),
            'function_with_multi_params': FunctionPlacer(),
            'for_loop_simple': ForLoopPlacer(),
            'for_loop_complex': ForLoopPlacer(),
            'nested_for_loop': ForLoopPlacer(),
            # C√°c placer cho Topic 4 (Bi·∫øn & To√°n h·ªçc)
            # [S·ª¨A L·ªñI] D√πng SequencingPlacer cho variable_loop ƒë·ªÉ n√≥ kh√¥ng l·∫•p ƒë·∫ßy map b·∫±ng v·∫≠t ph·∫©m.
            # ƒêi·ªÅu n√†y bu·ªôc solver ph·∫£i t·∫°o ra l·ªùi gi·∫£i d√πng bi·∫øn ƒë·ªÉ di chuy·ªÉn qua c√°c ƒëo·∫°n ƒë∆∞·ªùng tr·ªëng.
            'variable_loop': SequencingPlacer(),
            'variable_counter': VariablePlacer(),
            'variable_update': VariablePlacer(),
            'variable_control_loop': VariablePlacer(),
            # [S·ª¨A L·ªñI] D√πng SequencingPlacer cho coordinate_math.
            # Logic c·ªßa n√≥ l√† ƒë·∫∑t m·ªôt s·ªë v·∫≠t ph·∫©m gi·ªõi h·∫°n l√™n map, ph√π h·ª£p v·ªõi
            # y√™u c·∫ßu c·ªßa b√†i to√°n t√¨m t·ªça ƒë·ªô, thay v√¨ l·∫•p ƒë·∫ßy map nh∆∞ VariablePlacer.
            'coordinate_math': SequencingPlacer(),
            'math_basic': VariablePlacer(),
            'math_complex': VariablePlacer(),
            'math_expression_loop': VariablePlacer(),
            'config_driven_execution': VariablePlacer(),
            'math_puzzle': VariablePlacer(),
            'if_else_logic': WhileIfPlacer(),
            'if_elseif_logic': WhileIfPlacer(),
            'logical_operators': WhileIfPlacer(),
            'while_loop': WhileIfPlacer(),
            'algorithm_design': AlgorithmPlacer(),
            'advanced_algorithm': AlgorithmPlacer(),
        }
        print("üëç ƒê√£ ƒëƒÉng k√Ω th√†nh c√¥ng t·∫•t c·∫£ c√°c chi·∫øn l∆∞·ª£c.")

    def generate_map(self, map_type: str, logic_type: str, params: dict) -> MapData:
        
        # --- DEBUG POINT B ---
        print(f"    DEBUG (B): Service nh·∫≠n ƒë∆∞·ª£c params: {params}")
        
        print(f"\n--- B·∫Øt ƒë·∫ßu sinh map: [Topology: '{map_type}', Placer: '{logic_type}'] ---")
        
        topology_strategy = self.topologies.get(map_type)
        if not topology_strategy:
            raise ValueError(f"Kh√¥ng t√¨m th·∫•y chi·∫øn l∆∞·ª£c topology n√†o c√≥ t√™n '{map_type}' ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω.")
            
        # (C·∫¢I TI·∫æN) TƒÉng k√≠ch th∆∞·ªõc l∆∞·ªõi ƒë·ªÉ c√≥ kh√¥ng gian cho c√°c map l·ªõn h∆°n
        grid_size = (14, 14, 14)

        # [S·ª¨A L·ªñI] M·ªôt s·ªë Topology (v√≠ d·ª•: GridTopology) c√≥ th·ªÉ truy·ªÅn to√†n b·ªô params v√†o PathInfo,
        # g√¢y ra l·ªói "unexpected keyword argument" n·∫øu params ch·ª©a c√°c key kh√¥ng mong mu·ªën (nh∆∞ 'map_type').
        # T·∫°o m·ªôt b·∫£n sao c·ªßa params v√† lo·∫°i b·ªè c√°c key kh√¥ng li√™n quan ƒë·∫øn topology ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n.
        topology_params = params.copy()
        topology_params.pop('map_type', None) # X√≥a 'map_type' n·∫øu c√≥
        path_info: PathInfo = topology_strategy.generate_path_info(grid_size=grid_size, params=topology_params)
        
        placement_strategy = self.placements.get(logic_type)
        if not placement_strategy:
            raise ValueError(f"Kh√¥ng t√¨m th·∫•y chi·∫øn l∆∞·ª£c placement n√†o c√≥ t√™n '{logic_type}' ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω.")
            
        final_layout: dict = placement_strategy.place_items(path_info, params=params)
        
        map_data = MapData(
            grid_size=grid_size,
            start_pos=final_layout.get('start_pos'),
            target_pos=final_layout.get('target_pos'),
            items=final_layout.get('items', []),
            obstacles=final_layout.get('obstacles', []),
            params=params, # [M·ªöI] Truy·ªÅn params v√†o MapData
            path_coords=path_info.path_coords, # (S·ª¨A L·ªñI) Truy·ªÅn path_coords v√†o MapData
            map_type=map_type,
            logic_type=logic_type
        )
        
        print(f"--- Ho√†n th√†nh sinh map: '{map_type}' ---")
        return map_data